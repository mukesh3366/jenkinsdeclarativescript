//declarativescript
//if we want to give the name of the pipeline,we use agent to denote the name. nodejsnode is the name
//in scripted way we use node('nodejsnode'){}
//if we specify "agent any" then it will take default as master, inscripted way it is node{}

@Library('sharedlibs') _ 
pipeline {
/*
agent {
    label 'nodes'
}
*/

agent any

tools{
maven 'maven-3.8.6' 
}
//triggers {
  //pollSCM '* * * * *'
  //cron '* * * * *'
//}

//get source code from github
stages{
stage('checkoutcode'){
steps{
sendSlackNotifications('STARTED')
git branch: 'development', credentialsId: 'd8225d5d-4e94-4274-b08b-8b05b7819134', url: 'https://github.com/royalveg/maven-web-application.git'
}
}
// build from maven
stage('buildfrommaven'){
steps{
sh "mvn clean package"
// for the above command if it was to work then we have to configure the maven, in scripted way we gave the maven path to get the command //worked, here we will specifyt like tool name in the start of the script, before the stages we will write that
}
}
//execute sonar qube report
stage('executesonarreport'){
steps{
sh "mvn sonar:sonar"
}
}
//upload into nexus artifact repo
stage('uploadtonexusartifact'){
steps{
sh "mvn deploy"
}
}
//deploy into tomcat server
stage('deployintomcat'){
steps{
sshagent(['a2680500-c36e-4bd3-a617-fb57e11dce22']){
sh "scp -o StrictHostkeyChecking=no target/maven-web-application.war ec2-user@172.31.1.51:/opt/apache-tomcat-9.0.65/webapps/"
}
}
}
}//stages closing
post {
  aborted {
    // One or more steps need to be included within each condition's block.
  sendSlackNotifications(currentBuild.result)
  }
  success {
    // One or more steps need to be included within each condition's block.
  sendSlackNotifications(currentBuild.result)
  }
  failure {
    // One or more steps need to be included within each condition's block.
  sendSlackNotifications(currentBuild.result)
  }
  
}
}//pipeline closing

/*
def slackNotifications(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: "#walmart-dev")
}

*/
